# This pipeline "header" defines a pipeline which will build and test a Tracim pull-request.
# It requires a ((github-webhook-token)) and a ((github-access-torken)) variables when used.
# It should be concatenated with "build-jobs.yml" to produce a complete pipeline.

## YAML definitions re-used in plans

# plan step to put the current job name as pending in github's PR
pending_status_notification: &pending_status_notification
  put: tracim-status-update
  resource: tracim-source
  inputs: [tracim-source]
  params: {path: tracim-source, status: pending, context: $BUILD_JOB_NAME}
  get_params: {skip_download: true}

# sync job statuses as success/failure/error in github's PR.
status_notifications: &status_notifications
  on_success:
    put: tracim-source
    inputs: [tracim-source]
    params: {path: tracim-source, status: success, context: $BUILD_JOB_NAME}
    get_params: {skip_download: true}
  on_failure:
    put: tracim-source
    inputs: [tracim-source]
    params: {path: tracim-source, status: failure, context: $BUILD_JOB_NAME}
    get_params: {skip_download: true}
  on_abort:
    put: tracim-source
    inputs: [tracim-source]
    params: {path: tracim-source, status: error, context: $BUILD_JOB_NAME}
    get_params: {skip_download: true}
## END YAML definitions


resource_types:
- name: tracim-source
  type: registry-image
  source:
    repository: aoldershaw/github-pr-resource

resources:
# the github's tracim-source
- name: tracim-source
  type: tracim-source
  check_every: 30s
  # TODO - S.G. - 2021/08/02
  # The token is not used as one webhook would have to be created PER PR in github.
  # This could be automated, but is not so easy.
  webhook_token: ((github-webhook-token))
  source:
    repository: tracim/tracim
    access_token: ((github-access-token))
    number: ((number))
# docker image used for running tests.
- name: test-image
  type: registry-image
  source:
    repository: algooci/tracim


# Pipeline jobs:
# 1. update this pipeline if the PR's file has changed
# 2. run tests in parallel (backend, frontend, end-to-end)
# Each check/test has its own status in the github's PR.
jobs:
- name: reconfigure-self
  plan:
    - in_parallel:
      - get: tracim-source
        trigger: true
      - get: test-image

    - task: build-pipeline
      image: test-image
      vars:
        pipeline: pull-request
      file: tracim-source/concourse/tasks/build-pipeline.yml

    - set_pipeline: self
      file: pipeline/pull-request.yml
      vars:
        github-webhook-token: ((github-webhook-token))
        github-access-token: ((github-access-token))
# Shared jobs definition
# can be included/appended in a complete pipeline definition.
# It must have access to:
# 1. Tracim sources through a "tracim-source" resource
# 2. Test container image through a "test-image" resource
# 3. Github status notifications called with YAML anchors:
#    - "status_notifications" (on_success/â€¦)
#    - "pending_status_notification" job.
# 4. a "reconfigure-self" job which takes care of updating the full pipeline

# Pipeline jobs:
# - run backend (lint -> quick tests -> full tests) checks
# - run frontend (lint + unit tests) checks
# - run end-to-end (cypress) checks
# All of these in parallel.
- name: backend-tests
  <<: *status_notifications
  plan:

  - in_parallel:
    - get: tracim-source
      passed: [reconfigure-self]
      trigger: true
    - get: test-image

  - *pending_status_notification

  - task: backend-lint
    image: test-image
    config:
      platform: linux
      inputs:
        - name: tracim-source
      run:
        dir: tracim-source
        path: concourse/scripts/backend-lint

  - across:
    - var: python_version
      values: ["3.5.10" , "3.6.14", "3.7.11"]
      max_in_flight: all
    task: backend-quick-tests_((.:python_version))
    image: test-image
    # TODO - S.G. - 2021-08-04: is there a less instrusive way to allow docker-in-docker ?
    privileged: true
    config:
      platform: linux
      inputs:
        - name: tracim-source
      run:
        dir: tracim-source
        path: concourse/scripts/backend-quick-tests
        args:
          - ((.:python_version))

  - across:
    - var: database
      values: ["sqlite", "postgresql", "mysql", "mariadb"]
      max_in_flight: all
    task: backend-full-tests_((.:database))
    image: test-image
    # TODO - S.G. - 2021-08-04: is there a less instrusive way to allow docker-in-docker ?
    privileged: true
    config:
      platform: linux
      inputs:
        - name: tracim-source
      run:
        dir: tracim-source
        path: concourse/scripts/backend-full-tests
        args:
          - "3.7.11"
          - ((.:database))

- name: frontend-tests
  <<: *status_notifications

  plan:

  - in_parallel:
    - get: tracim-source
      passed: [reconfigure-self]
      trigger: true
    - get: test-image

  - *pending_status_notification

  - task: frontend-unit-tests
    image: test-image
    config:
      platform: linux
      inputs:
        - name: tracim-source
      run:
        dir: tracim-source
        path: concourse/scripts/frontend-unit-tests

- name: end-to-end-tests
  <<: *status_notifications
  plan:
  - in_parallel:
    - get: tracim-source
      passed: [reconfigure-self]
      trigger: true
    - get: test-image

  - *pending_status_notification

  - task: end-to-end-cypress-tests
    image: test-image
    # needed for docker during tests
    # TODO - S.G. - 2021-08-04: is there a less instrusive way to allow docker-in-docker ?
    privileged: true
    config:
      platform: linux
      inputs:
        - name: tracim-source
      run:
        dir: tracim-source
        path: concourse/scripts/end-to-end-cypress-tests
